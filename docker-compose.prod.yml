version: '3.8'

services:
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
    networks:
      - live-retro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: always
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - PORT=8080
      - ENVIRONMENT=production
      - RATE_LIMIT_REQUESTS_PER_SECOND=20
      - RATE_LIMIT_BURST=50
      - LOG_LEVEL=warn
      - LOG_FORMAT=json
      - CORS_ORIGINS=${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - live-retro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_WS_URL=${WS_URL:-ws://localhost:8080}
      - NODE_ENV=production
    depends_on:
      server:
        condition: service_healthy
    networks:
      - live-retro-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - live-retro-network

volumes:
  redis_data:

networks:
  live-retro-network:
    driver: bridge